<?xml version="1.0"?>
<launch>
	
	<arg name="id_robot" default="pallet_truck"/>
	
	<arg name="x_init_pose" default="0"/>
	<arg name="y_init_pose" default="0"/>
	<arg name="z_init_pose" default="0"/>
	<arg name="a_init_pose" default="0"/>

	<arg name="xacro_robot" default="pallet_truck_std.urdf.xacro"/>
	<arg name="launch_robot_localization" default="false"/>
	<arg name="launch_amcl_and_mapserver" default="false"/>
	<arg name="launch_gmapping" default="false"/>
	<arg name="launch_move_base" default="false"/>
	<arg name="launch_base_hw_sim" default="false"/>
	<arg name="map_file" default="$(find pallet_truck_localization)/maps/empty/empty.yaml"/>
	<arg name="launch_pad" default="true"/>
        <arg name="prefix" value="$(arg id_robot)_"/>	
        <arg name="global_frame" default="$(arg prefix)map"/>

	<!-- BEGIN ROBOT-->
	<group ns="$(arg id_robot)">
	  				  
		<!-- Load the URDF into the ROS Parameter Server -->
		<param name="robot_description" 
		command="$(find xacro)/xacro '$(find pallet_truck_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix)"/>

		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
			<remap from="/joint_states" to="joint_states" />
		</node>

		<!-- Spawner model into gazebo -->
		<node name="urdf_spawner_pallet_truck_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
		 args="-x $(arg x_init_pose) -y $(arg y_init_pose) -z $(arg z_init_pose) -urdf -param robot_description -model $(arg id_robot)" />

        <!-- start pad -->
        <include if="$(arg launch_pad)" file="$(find pallet_truck_pad)/launch/pallet_truck_pad.launch"/>

		<!-- start pallet_truck_control nodes -->  
		<include file="$(find pallet_truck_control)/launch/pallet_truck_control.launch"> 
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="id_robot" value="$(arg id_robot)"/>
			<arg name="sim" value="true"/>
			<arg name="launch_robot_localization" value="$(arg launch_robot_localization)"/>
		</include>

		<!-- robot_localization nodes, publishes transformation world->odom->base_footprint -->
		<include if="$(arg launch_robot_localization)" file="$(find pallet_truck_localization)/launch/pallet_truck_localization_basic.launch"/>
		
		<!-- amcl and map server base-->
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find pallet_truck_localization)/launch/map_server.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="map_file" value="$(arg map_file)"/>
			<arg name="frame_id" value="$(arg global_frame)"/>
		</include>
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find pallet_truck_localization)/launch/amcl.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="x_init_pose" value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" value="$(arg y_init_pose)"/>
			<arg name="a_init_pose" value="$(arg a_init_pose)"/>
			<arg name="global_frame" value="$(arg global_frame)"/>
		</include>

		<!-- move base -->
		<include if="$(arg launch_move_base)" file="$(find pallet_truck_navigation)/launch/move_base.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="global_frame" value="$(arg global_frame)"/>
		</include>
		
		<!-- gmapping -->
		<include if="$(arg launch_gmapping)" file="$(find pallet_truck_localization)/launch/gmapping.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- base_hw_sim -->
		<include if="$(arg launch_base_hw_sim)" file="$(find robotnik_base_hw_sim)/launch/pallet_truck_hw_sim.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

	</group>

</launch>

